---
name: Install Python Dependencies
description: |
  Install python dependencies required for StackStorm-Exchange pack tests or index updates.
  Before using this, make sure to run
  StackStorm-Exchange/ci/.github/actions/checkout and
  StackStorm-Exchange/ci/.github/actions/apt-dependencies.
author: StackStorm

inputs:
  python-version:
    required: true
    description: Which python version we should install
  cache-version:
    required: false
    default: "v0"
  mode:
    required: false
    default: pack
    options:
      - index
      - pack

outputs:
  pip-version:
    description: The installed pip version (pulled from st2.git)
    value: ${{ steps.virtualenv.outputs.pip-version }}

runs:
  using: "composite"
  steps:

    - name: Add VIRTUALENV_DIR to env context
      shell: bash
      run: |
        echo "VIRTUALENV_DIR=${HOME}/virtualenv" >> ${GITHUB_ENV}
        echo "REQUIREMENTS_DIR=${GITHUB_ACTION_PATH}" >> ${GITHUB_ENV}

    - name: 'Set up Python (${{ inputs.python-version }})'
      uses: actions/setup-python@v2
      with:
        python-version: '${{ inputs.python-version }}'

    - name: Cache Python Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/virtualenv
        key: ${{ runner.os }}-python-${{ inputs.python-version }}-${{ inputs.cache-version }}-${{ hashFiles('st2/requirements.txt', 'pack/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ inputs.python-version }}-${{ inputs.cache-version }}-

    - name: Install virtualenv command
      shell: bash
      # this should run in the st2 checkout
      working-directory: st2
      run: |
        echo "::group::Install virtualenv command"
        ./scripts/github/install-virtualenv.sh
        echo "::endgroup::"

    - name: Create ~/virtualenv
      shell: bash
      id: virtualenv
      # this should run in the st2 checkout
      working-directory: st2
      run: |
        echo "::group::Create ~/virtualenv"
        PIP_VERSION=$(awk '/^PIP_VERSION/ {print $3}' Makefile)
        SETUPTOOLS_VERSION=$(awk '/^SETUPTOOLS_VERSION/ {print $3}' Makefile)
        echo "pip-version=${PIP_VERSION}" >> ${GITHUB_OUTPUT}
        echo "setuptools-version=${SETUPTOOLS_VERSION}" >> ${GITHUB_OUTPUT}
        [[ -x "${VIRTUALENV_DIR}/bin/python" ]] || virtualenv --pip "${PIP_VERSION}" ~/virtualenv
        ${VIRTUALENV_DIR}/bin/pip install -q -U "pip==${PIP_VERSION}" "setuptools==${SETUPTOOLS_VERSION}"
        echo "::endgroup::"

    - name: Install CI Requirements
      if: inputs.mode == 'pack'
      shell: bash
      # This installs any packages found in the requirements-dev.txt and requirements-pack-tests.txt 
      # with a pinned version or that has a matching entry in st2/test-requirements.txt
      run: |
        for req_file in requirements-dev.txt requirements-pack-tests.txt; do
          echo "::group::Install CI Requirements from ${req_file}"
          # grab any local unpinned requirements
          REQUIREMENTS=$(grep -v -e '^#' -e '=' "${REQUIREMENTS_DIR}/${req_file}" | xargs echo -n)
          # escape any requirements using brackets to not fail regex
          # package-name[dependency] => package-name\[dependency\]
          ESCAPED_REQUIREMENTS=$(echo $REQUIREMENTS | sed 's|\[\(.*\)\]|\\[\1\\]|g')
          # grab the pinned versions from the st2 checkout
          # using shell parameter expansion replace spaces with [ =><]| to work with grep regex
          grep -E "${ESCAPED_REQUIREMENTS// /[ =><]|}[ =><]" ${ST2_REPO_PATH}/test-requirements.txt > ${GITHUB_WORKSPACE}/${req_file}
          # grab any local pinned requirements
          grep -e '=' "${REQUIREMENTS_DIR}/${req_file}" >> ${GITHUB_WORKSPACE}/${req_file} || true
          echo ${GITHUB_WORKSPACE}/${req_file}:
          cat ${GITHUB_WORKSPACE}/${req_file}
          echo
          # install
          ${VIRTUALENV_DIR}/bin/pip install -r ${GITHUB_WORKSPACE}/${req_file}
          echo "::endgroup::"
        done

    - name: Install StackStorm Requirements
      # this should run in the st2 checkout
      shell: bash
      working-directory: st2
      run: |
        echo "::group::Install StackStorm Requirements"
        ${VIRTUALENV_DIR}/bin/pip install -r requirements.txt
        echo "::endgroup::"

    - name: Install Runners
      if: inputs.mode == 'pack'
      shell: bash
      run: |
        for runner in ${ST2_REPO_PATH}/contrib/runners/*; do
          echo "::group::Install Runner: ${runner##*/}"
          (. ${VIRTUALENV_DIR}/bin/activate; cd $runner; python setup.py develop)
          echo "::endgroup::"
        done

    - name: Register Metrics Drivers
      shell: bash
      run: |
        echo "::group::Register Metrics Drivers"
        # Install st2common to register metrics drivers
        (. ${VIRTUALENV_DIR}/bin/activate; cd ${ST2_REPO_PATH}/st2common; python setup.py develop)
        echo "::endgroup::"

    - name: Extract Pack supported python_versions
      if: inputs.mode == 'pack'
      shell: bash
      working-directory: pack
      run: |
        PY_V=$(echo ${{ inputs.python-version }} | cut -c1)
        PACK_PYTHON_VERSIONS=$(${VIRTUALENV_DIR}/bin/python ${CI_DIR}/utils/extract_from_yaml.py pack.yaml python_versions)
        PACK_SUPPORTS_PYTHON_VERSION=$(echo ${PACK_PYTHON_VERSIONS} | jq -r 'any(.[]; . == "'${PY_V}'")')
        echo "PACK_PYTHON_VERSIONS=${PACK_PYTHON_VERSIONS}" | tee -a ${GITHUB_ENV}
        echo "PACK_SUPPORTS_PYTHON_VERSION=${PACK_SUPPORTS_PYTHON_VERSION}" | tee -a ${GITHUB_ENV}
        echo "PYTHON_MAJOR_VERSION=${PY_V}" | tee -a ${GITHUB_ENV}

    - name: Install Pack Requirements
      if: inputs.mode == 'pack'
      shell: bash
      working-directory: pack
      env:
        PACK_REQUIREMENTS_FILE: requirements.txt
        PACK_TESTS_REQUIREMENTS_FILE: requirements-tests.txt
      run: |
        echo "::group::Install Pack Requirements"
        if [[ -f "${PACK_REQUIREMENTS_FILE}" ]]; then
          echo "Installing pack requirements from ${PACK_REQUIREMENTS_FILE}"
          if ! ${VIRTUALENV_DIR}/bin/pip install -r "${PACK_REQUIREMENTS_FILE}"; then
            rc=${PIPESTATUS[0]}
            if [[ "true" == "${PACK_SUPPORTS_PYTHON_VERSION}" ]]; then
              echo rc=$rc
              exit $rc
            else
              echo "Ignoring failures since pack doesn't declare Python ${PYTHON_MAJOR_VERSION} support in pack.yaml"
            fi
          fi
        fi
        if [[ -f "${PACK_TESTS_REQUIREMENTS_FILE}" ]]; then
          echo "Installing pack tests requirements from ${PACK_TESTS_REQUIREMENTS_FILE}"
          if ! ${VIRTUALENV_DIR}/bin/pip install -r "${PACK_TESTS_REQUIREMENTS_FILE}"; then
            rc=${PIPESTATUS[0]}
            if [[ "true" == "${PACK_SUPPORTS_PYTHON_VERSION}" ]]; then
              echo rc=$rc
              exit $rc
            else
              echo "Ignoring failures since pack doesn't declare Python ${PYTHON_MAJOR_VERSION} support in pack.yaml"
            fi
          fi
        fi
        echo "::endgroup::"

    - name: Print Versions
      shell: bash
      run: |
        echo "::group::Print Versions"
        source ${VIRTUALENV_DIR}/bin/activate
        python3 --version
        pip --version
        virtualenv --version
        echo "::endgroup::"
        echo "::group::pip list"
        pip list
        echo "::endgroup::"
