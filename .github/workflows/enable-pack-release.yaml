name: Enable Pack Release

on:
  # First day of the month at midnight.
  schedule:
    - cron:  "0 0 1 * *"
  # manual rebuilds by TSC members
  workflow_dispatch:

env:
  ci_branch: master
  exchange_tools_branch: master
  packs_org: StackStorm-Exchange
  pack_repo_prefix: stackstorm

# Only allow one workflow run per branch at a time.
# When one is already running, new runs will be pending.
# https://github.blog/changelog/2021-04-19-github-actions-limit-workflow-run-or-job-concurrency/
concurrency:
  group: enable-pack-release-${{ github.ref }}
  # Do not use cancel-in-progress! Or we might create a scenario where all workflows get canceled before they complete.

permissions:
  actions: write # Need to enable Actions
  contents: read # Need to clone repositories

jobs:
  enable_pack_release_workflow:
    runs-on: ubuntu-20.04
    # When parent workflow is named "Enable Pack Release Workflow" this shows up as:
    #   "Enable Pack Release Workflow / Enable Pack Release Workflow"
    name: Enable Pack Release Workflow

    steps:

    - name: Add checkout paths to env context
      shell: bash
      run: |
        echo "CI_DIR=${{ github.workspace }}/ci" >> ${GITHUB_ENV}
        echo "TOOLS_DIR=${{ github.workspace }}/exchange-tools" >> ${GITHUB_ENV}
        echo "INDEX_DIR=${{ github.workspace }}/index" >> ${GITHUB_ENV}
        echo "PACKS_PATH=${{ github.workspace }}/packs" >> ${GITHUB_ENV}

    - name: Checkout index repo
      uses: actions/checkout@v2
      with:
        path: index
        # checkout the latest on the branch instead of the sha from when triggered
        ref: ${{ github.ref }}
        fetch-depth: 1

    - name: Checkout ci repo
      uses: actions/checkout@v2
      with:
        repository: StackStorm-Exchange/ci
        ref: ${{ env.ci_branch }}
        path: ci
        fetch-depth: 1

    - name: Checkout exchange-tools repo
      uses: actions/checkout@v2
      with:
        repository: StackStorm-Exchange/exchange-tools
        ref: ${{ env.exchange_tools_branch }}
        path: exchange-tools
        fetch-depth: 1

    - name: Checkout Pack Repos and enable their Release Workflows
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
        PACKS_ORG: ${{ env.packs_org }}
        PACKS_PREFIX: ${{ env.pack_repo_prefix }}
      run: |
        mkdir -p ${PACKS_PATH}
        cd ${PACKS_PATH}
        source ${TOOLS_DIR}/functions.sh
        EXCLUDE_PACKS=$(grep -v '^#' "${INDEX_DIR}/v1/exclude_packs.txt" | xargs echo -n)
        for repo_name in $(_gh_list_repo_names ${PACKS_ORG} ${PACKS_PREFIX}); do
          echo "::group::Clone ${PACKS_ORG}/${repo_name}"
          gh repo clone "${PACKS_ORG}/${repo_name}"
          if latestTag=$(git -C ${repo_name} describe --tags `git -C ${repo_name} rev-list --tags --max-count=1`); then
            echo latestTag = $latestTag
            git -C ${repo_name} checkout $latestTag -b latestTagBranch
          fi
          echo
          echo "::endgroup::" # DELETED notices will not be folded to simplify scanning action output
          if [[ -z "$latestTag" ]]; then
            rm -rf ${repo_name}
            echo "DELETED clone of ${PACKS_ORG}/${repo_name}: missing git tags"
            echo "${PACKS_ORG}/${repo_name}" >> ${GITHUB_WORKSPACE}/bad_pack_repos
          elif [[ ! -f "./${repo_name}/pack.yaml" ]]; then
            rm -rf ${repo_name}
            echo "DELETED clone of ${PACKS_ORG}/${repo_name}: missing pack.yaml"
            echo "${PACKS_ORG}/${repo_name}" >> ${GITHUB_WORKSPACE}/bad_pack_repos
          elif [[ " ${EXCLUDE_PACKS} " =~ " ${repo_name#${PACKS_PREFIX}-} " ]]; then
            rm -rf ${repo_name}
            echo "DELETED clone of ${PACKS_ORG}/${repo_name}: pack excluded via index.git/v1/exclude_packs.txt"
            echo "${PACKS_ORG}/${repo_name}" >> ${GITHUB_WORKSPACE}/bad_pack_repos
          else
            #
            #  This is not a bad or excluded Pack, ensure the Release workflow is active
            #
            echo "::group::Ensure Release workflow for ${PACKS_ORG}/${repo_name} is active"
            if [[ -f "./${repo_name}/.github/workflows/release.yaml" ]]; then
              echo "GitHub Release workflow manifest found for ${PACKS_ORG}/${repo_name}"
                # NOTE: Unfortunately "gh workflow list" does not have --json
                if ! gh workflow list ${PACKS_ORG}/${repo_name} --all | grep -E '^Release\b\s+active\b'; then
                  echo "GitHub Release workflow for ${PACKS_ORG}/${repo_name} not active, enabling"
                  gh workflow enable ${PACKS_ORG}/${repo_name}
                else
                  echo "GitHub Release workflow for ${PACKS_ORG}/${repo_name} is already active"
                fi
            else
              echo "No GitHub Release workflow manifest found for ${PACKS_ORG}/${repo_name}"
            fi
            echo "::endgroup::"
          fi
        done
        if [[ -f ${GITHUB_WORKSPACE}/bad_pack_repos ]]; then
          echo "These repos were DELETED. See above for why."
          cat ${GITHUB_WORKSPACE}/bad_pack_repos
        fi
